/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef Search_H
#define Search_H

#include <thrift/TDispatchProcessor.h>
#include "search_types.h"



class SearchIf {
 public:
  virtual ~SearchIf() {}
  virtual void Find(std::vector<Recipe> & _return, const std::string& query) = 0;
};

class SearchIfFactory {
 public:
  typedef SearchIf Handler;

  virtual ~SearchIfFactory() {}

  virtual SearchIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(SearchIf* /* handler */) = 0;
};

class SearchIfSingletonFactory : virtual public SearchIfFactory {
 public:
  SearchIfSingletonFactory(const boost::shared_ptr<SearchIf>& iface) : iface_(iface) {}
  virtual ~SearchIfSingletonFactory() {}

  virtual SearchIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(SearchIf* /* handler */) {}

 protected:
  boost::shared_ptr<SearchIf> iface_;
};

class SearchNull : virtual public SearchIf {
 public:
  virtual ~SearchNull() {}
  void Find(std::vector<Recipe> & /* _return */, const std::string& /* query */) {
    return;
  }
};

typedef struct _Search_Find_args__isset {
  _Search_Find_args__isset() : query(false) {}
  bool query;
} _Search_Find_args__isset;

class Search_Find_args {
 public:

  Search_Find_args() : query() {
  }

  virtual ~Search_Find_args() throw() {}

  std::string query;

  _Search_Find_args__isset __isset;

  void __set_query(const std::string& val) {
    query = val;
  }

  bool operator == (const Search_Find_args & rhs) const
  {
    if (!(query == rhs.query))
      return false;
    return true;
  }
  bool operator != (const Search_Find_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Search_Find_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Search_Find_pargs {
 public:


  virtual ~Search_Find_pargs() throw() {}

  const std::string* query;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Search_Find_result__isset {
  _Search_Find_result__isset() : success(false) {}
  bool success;
} _Search_Find_result__isset;

class Search_Find_result {
 public:

  Search_Find_result() {
  }

  virtual ~Search_Find_result() throw() {}

  std::vector<Recipe>  success;

  _Search_Find_result__isset __isset;

  void __set_success(const std::vector<Recipe> & val) {
    success = val;
  }

  bool operator == (const Search_Find_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Search_Find_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Search_Find_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Search_Find_presult__isset {
  _Search_Find_presult__isset() : success(false) {}
  bool success;
} _Search_Find_presult__isset;

class Search_Find_presult {
 public:


  virtual ~Search_Find_presult() throw() {}

  std::vector<Recipe> * success;

  _Search_Find_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class SearchClient : virtual public SearchIf {
 public:
  SearchClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  SearchClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void Find(std::vector<Recipe> & _return, const std::string& query);
  void send_Find(const std::string& query);
  void recv_Find(std::vector<Recipe> & _return);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class SearchProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<SearchIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (SearchProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_Find(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  SearchProcessor(boost::shared_ptr<SearchIf> iface) :
    iface_(iface) {
    processMap_["Find"] = &SearchProcessor::process_Find;
  }

  virtual ~SearchProcessor() {}
};

class SearchProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  SearchProcessorFactory(const ::boost::shared_ptr< SearchIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< SearchIfFactory > handlerFactory_;
};

class SearchMultiface : virtual public SearchIf {
 public:
  SearchMultiface(std::vector<boost::shared_ptr<SearchIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~SearchMultiface() {}
 protected:
  std::vector<boost::shared_ptr<SearchIf> > ifaces_;
  SearchMultiface() {}
  void add(boost::shared_ptr<SearchIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void Find(std::vector<Recipe> & _return, const std::string& query) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Find(_return, query);
    }
    ifaces_[i]->Find(_return, query);
    return;
  }

};



#endif
